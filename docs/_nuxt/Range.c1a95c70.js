import{_ as y,E as z,K as s,L as C,D as l,q as h,Z as t,o as V,c as k,W as N,a5 as S,a as c,V as $,P as g,a2 as w}from"./entry.dacc0237.js";const A=z({inheritAttrs:!1,props:{modelValue:{type:Number,default:0},name:{type:String,default:null},disabled:{type:Boolean,default:!1},min:{type:Number,default:0},max:{type:Number,default:100},step:{type:Number,default:1},size:{type:String,default:()=>s.ui.range.default.size,validator(e){return Object.keys(s.ui.range.size).includes(e)}},color:{type:String,default:()=>s.ui.range.default.color,validator(e){return s.ui.colors.includes(e)}},ui:{type:Object,default:()=>s.ui.range}},emits:["update:modelValue"],setup(e,{emit:u}){const i=C(),a=l(()=>h({},e.ui,i.ui.range)),d=l({get(){return e.modelValue},set(n){u("update:modelValue",n)}}),m=l(()=>t(a.value.wrapper,a.value.size[e.size])),r=l(()=>t(a.value.base,a.value.background,a.value.rounded,a.value.ring.replaceAll("{color}",e.color),a.value.size[e.size])),v=l(()=>t(a.value.thumb.base,a.value.thumb.color.replaceAll("{color}",e.color),a.value.thumb.ring,a.value.thumb.background,a.value.thumb.size[e.size])),f=l(()=>t(a.value.progress.base,a.value.progress.rounded,a.value.progress.background.replaceAll("{color}",e.color),a.value.size[e.size])),b=l(()=>{const{modelValue:n,min:o,max:p}=e;return{width:`${(Math.max(o,Math.min(n,p))-o)/(p-o)*100}%`}});return{ui:a,value:d,wrapperClass:m,inputClass:r,thumbClass:v,progressClass:f,progressStyle:b}}}),B=["id","name","min","max","disabled","step"];function M(e,u,i,a,d,m){return V(),k("div",{class:g(e.wrapperClass)},[N(c("input",$({id:e.name,ref:"input","onUpdate:modelValue":u[0]||(u[0]=r=>e.value=r),name:e.name,min:e.min,max:e.max,disabled:e.disabled,step:e.step,type:"range",class:[e.inputClass,e.thumbClass]},e.$attrs),null,16,B),[[S,e.value,void 0,{number:!0}]]),c("span",{class:g(e.progressClass),style:w(e.progressStyle)},null,6)],2)}const O=y(A,[["render",M]]);export{O as default};
